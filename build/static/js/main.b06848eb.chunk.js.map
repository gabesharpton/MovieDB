{"version":3,"sources":["Movie.js","MoviesList.js","MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["Movie","movie","Title","title","to","id","Poster","src","poster_path","alt","styled","img","h2","MovieGrid","div","MoviesList","props","state","movies","fetch","process","res","json","console","log","this","setState","results","map","key","PureComponent","MovieDetail","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","overview","Component","require","config","App","className","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0gBAOA,IAceA,EAZD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACF,6BAEI,kBAACC,EAAD,KAAQD,EAAME,OACd,kBAAC,IAAD,CAAMC,GAAE,WAAMH,EAAMI,KACpB,kBAAC,IAAD,CAAWA,GAAIJ,EAAMI,IACrB,kBAACC,EAAD,CAAQC,IAAG,UARP,kCAQO,OAAmBN,EAAMO,aAAeC,IAAKR,EAAME,YAcjEG,EAASI,IAAOC,IAAV,KAGbT,EAAQQ,IAAOE,GAAV,K,8KC1BX,IAAMC,EAAYH,IAAOI,IAAV,KA6CAC,E,YApCf,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,IAHM,E,8LAUIC,MAAM,uDAAD,OAAwDC,qH,cAAzEC,E,0BACeA,EAAIC,Q,OAAnBJ,E,OACNK,QAAQC,IAAIN,GACZO,KAAKC,SAAS,CACZR,OAAQA,EAAOS,U,kDAGjBJ,QAAQC,IAAR,M,0FAOF,OACE,kBAACX,EAAD,KACGY,KAAKR,MAAMC,OAAOU,KAAI,SAAC3B,GAAD,OACnB,kBAAC,EAAD,CAAO4B,IAAK5B,EAAMI,GAAIJ,MAAOA,Y,GA5Bd6B,iB,mZCTzB,IA+CeC,E,2MAvCbd,MAAQ,CACNhB,MAAO,I,gMAIakB,MAAM,sCAAD,OAAuCM,KAAKT,MAAMgB,MAAMC,OAAO5B,GAA/D,oBAA6Ee,qD,cAA9FC,E,0BACcA,EAAIC,Q,OAAlBrB,E,OACNsB,QAAQC,IAAIvB,GACZwB,KAAKC,SAAS,CACZzB,U,kDAGFsB,QAAQC,IAAR,M,0FAKK,IACCvB,EAAUwB,KAAKR,MAAfhB,MACV,OACE,kBAACiC,EAAD,CAAcC,SAAQ,UA3BJ,mCA2BI,OAAqBlC,EAAMmC,gBAC7C,kBAACC,EAAD,KACI,kBAAC,IAAD,CAAWhC,GAAIJ,EAAMI,IAC3B,kBAACC,EAAD,CAAQC,IAAG,UA/BG,kCA+BH,OAAmBN,EAAMO,aAAeC,IAAKR,EAAME,SAE9D,6BACA,4BAAKF,EAAME,OAEX,4BAAKF,EAAMqC,cACX,2BAAIrC,EAAMsC,iB,GA/BUC,aA2CpBN,EAAexB,IAAOI,IAAV,KAGA,SAAAE,GAAK,OAAIA,EAAMmB,YAI3BE,EAAY3B,IAAOI,IAAV,KCtDf2B,EAAQ,IAAUC,SAGlB,IAsBeC,EAtBH,kBACV,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,IAAD,CAAMxC,GAAG,KACP,6CAMG,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,IAAIC,UAAWhC,IACjC,kBAAC,IAAD,CAAO+B,KAAK,OAAOC,UAAWhB,QCXvBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCXNoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b06848eb.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive'\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154'\n\nconst Movie = ({movie}) => (\n            <div>\n            \n                <Title>{movie.title}</Title>\n                <Link to={`/${movie.id}`}>\n                <Overdrive id={movie.id}>\n                <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title}  />\n            </Overdrive>\n                </Link>\n            </div>\n        );\n    \nexport default Movie;\n\nMovie.propTypes = {\n    movie: PropTypes.shape({\n        title: PropTypes.string.isRequired, \n    }).isRequired,\n}\n\nexport const Poster = styled.img`\nbox-shadow: 0 0 35px black\n`;\nconst Title = styled.h2`\ncolor: white;`;","import React, { PureComponent } from 'react';\nimport Movie from './Movie';\nimport styled from 'styled-components';\n\n\n\nconst MovieGrid = styled.div`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(6, 1fr);\n  grid-row-gap: 1rem;\n\n`;\n\nclass MoviesList extends PureComponent {\nconstructor(props){\n  super(props)\n  this.state = {\n    movies: []\n  }\n}\n  \n\nasync componentDidMount() {\n  try {\n    const res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_LIST_KEY}`)\n    const movies = await res.json();\n    console.log(movies)\n    this.setState({\n      movies: movies.results\n    })\n  }catch(e) {\n    console.log(e)\n  }\n  \n}\n    render(){\n\n    \n  return (\n    <MovieGrid>\n      {this.state.movies.map((movie) => \n          <Movie key={movie.id} movie={movie} />\n      )}\n    </MovieGrid>\n  );\n}\n}\n\n\n\nexport default MoviesList;\n\n","import React, { Component } from 'react';\nimport { Poster } from \"./Movie\"\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive'\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154'\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280'\n\n\n\n\nclass MovieDetail extends Component {\n\n  state = {\n    movie: {}\n  }\n  async componentDidMount() {\n    try {\n      const res = await fetch(`https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=${process.env.REACT_APP_DETAIL_KEY}`)\n      const movie = await res.json();\n      console.log(movie)\n      this.setState({\n        movie\n      })\n    }catch(e) {\n      console.log(e)\n      }\n    \n  }\n\n  render(){\n    const { movie } = this.state;\n  return (\n    <MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}>\n        <MovieInfo>\n            <Overdrive id={movie.id}>\n      <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title}  />\n      </Overdrive>\n      <div>\n      <h1>{movie.title}</h1>\n      {/* <Poster src={`${BACKDROP_PATH}${movie.backdrop_path}`} alt={movie.title}  /> */}\n      <h3>{movie.release_date}</h3>\n      <p>{movie.overview}</p>\n      </div>\n      </MovieInfo>\n    </MovieWrapper>\n  );\n}\n}\n\n\n\nexport default MovieDetail;\n\nconst MovieWrapper = styled.div`\nposition: relative;\npadding-top: 50vh;\nbackground: url(${props => props.backdrop}) no-repeat;\nbackground-size: cover;\n`;\n\nconst MovieInfo = styled.div`\nbackground: white;\ntext-align: left;\npadding: 2rem 10%;\ndisplay: flex;\n> div {\n    margin-left: 20px;\n}\nimg {\n    position: relative;\n    top: -5rem\n}\n`","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport './App.css';\n\nimport MoviesList from './MoviesList'\nimport MovieDetail from './MovieDetail'\nrequire('dotenv').config()\n\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Link to=\"/\" >\n        <h1>| MovieDB |</h1>\n        \n      </Link>\n\n\n      </header>\n           <Switch>\n             <Route exact path=\"/\" component={MoviesList} />\n             <Route path=\"/:id\" component={MovieDetail} />\n           </Switch>\n          \n    </div>\n    </Router>\n\n)\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}